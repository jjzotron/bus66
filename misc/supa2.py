import math
import itertools

def palindrome_superpermutation_len(l):
	sum = 0
	for i in range(1, l+1):
		sum = sum + math.factorial(i)
	return sum

def min_length(len_of_perms):
	num_of_perms = math.factorial(len_of_perms)
	num_of_perms = num_of_perms - 1 # first permutation already accounted for 
	return len_of_perms + num_of_perms
	
def print_table():
	# print table
	found_lengths = [0, 1, 3, 9, 33, 153, 872, 5912]
	print("index\tmin_len\tfound_len")
	for i, found_length in enumerate(found_lengths):
		print "{0},\t{1},\t{2}\t{3}".format(i, min_length(i), found_length, found_length - min_length(i))
		
# print_table()
six_superperm  = '''12345612345162345126345123645132645136245136425136452136451234651234156234152634152364152346152341652341256341253641253461253416253412653412356412354612354162354126354123654132654312645316243516243156243165243162543162453164253146253142653142563142536142531645231465231456231452631452361452316453216453126435126431526431256432156423154623154263154236154231654231564213564215362415362145362154362153462135462134562134652134625134621536421563421653421635421634521634251634215643251643256143256413256431265432165432615342613542613452613425613426513426153246513246531246351246315246312546321546325146325416325461325463124563214563241563245163245613245631246532146532416532461532641532614532615432651436251436521435621435261435216435214635214365124361524361254361245361243561243651423561423516423514623514263514236514326541362541365241356241352641352461352416352413654213654123'''

six_superperm_p = '''123456123451623451263451236451234651234156234152634152364152346152341652341256341253641253461253416253412653412356412354612354162354126354123654123145623145263145236145231645231465231425631425361425316425314625314265314235614235164235146235142635142365142315642315462315426315423615423165423124563124536124531624531264531246531243561243516243512643512463512436512431562431526431524631524361524316524312564312546312543612543162543126543121345621345261345216345213645213465213425613425163425136425134625134265134215634215364215346215342615342165342135642135462135426135421635421365421324561324516324513624513264513246513241563241536241532641532461532416532413562413526413524613524163524136524132564132546132541632541362541326541321456321453621453261453216453214653214356214352614352164352146352143652143256143251643251463251436251432651432156432154632154362154326154321654321'''

def verify_superperm(n, sp):
	unfound = []
	for perm in itertools.permutations(range(1, n+1)):
		perm_str = ''.join(map(str, perm))
		if sp.find(perm_str) == -1:
			print("could not find " + perm_str + " in " + sp)
			unfound.append(perm_str)
	return True if unfound == [] else unfound

def heatmap(n):
	heat = [] * n
	heat
	
#print(verify_superperm(3, "213212312"))
#print(verify_superperm(3, "123121321"))
#print(verify_superperm(2, "212"))
#print(verify_superperm(2, "121"))
#print(verify_superperm(6, six_superperm))
print(verify_superperm(6, six_superperm_p))

'''
for x in range(1,7):
	print("index:"+str(x)+"\t"+str(six_superperm_p.count(str(x))))
'''
